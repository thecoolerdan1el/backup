#!/usr/bin/env python3

import rclpy
from rclpy.node import Node

from std_msgs.msg import String
from geometry_msgs.msg import TransformStamped

from tf2_msgs.msg import TFMessage

import tf2_msgs.msg
import time

class Pose_to_tf(Node):

    def __init__(self):
        super().__init__('pose_to_tf')
        
        self.publisher_ = self.create_publisher(TFMessage, 'tf', 10)
        
        
        self.subscription = self.create_subscription(
            TransformStamped,
            '/tugbot/pose',
            self.listener_callback,
            10)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
#        time.sleep(0.1)
        tf_ = TFMessage()
        if (msg.child_frame_id == "world_demo" or msg.header.frame_id == "world_demo"):
               return
                
#        if (msg.child_frame_id == "tugbot/scan_omni"):
#                msg.child_frame_id = "tugbot/scan_omni/scan_omni"
              
        tf_.transforms.append(msg) 
        self.publisher_.publish(tf_)
        
        #Criar uma tf
        tf_2 = TransformStamped()
        tf_2 = msg;
        tf_2.header.frame_id = "base_link"
        tf_2.child_frame_id = "tugbot"
        
        tf_2.transform.translation.x = 0.0
        tf_2.transform.translation.y = 0.0
        tf_2.transform.translation.z = 0.0
        
        tf_2.transform.rotation.x = 0.0
        tf_2.transform.rotation.y = 0.0
        tf_2.transform.rotation.z = 0.0
        tf_2.transform.rotation.w = 1.0
        tf_.transforms.append(tf_2) 
        self.publisher_.publish(tf_)
        
        
         #Criar uma tf
        tf_2 = TransformStamped()
        tf_2 = msg;
        tf_2.header.frame_id = "tugbot/scan_omni"
        tf_2.child_frame_id = "tugbot/scan_omni/scan_omni"
        
        tf_2.transform.translation.x = 0.0
        tf_2.transform.translation.y = 0.0
        tf_2.transform.translation.z = 0.0
        
        tf_2.transform.rotation.x = 0.0
        tf_2.transform.rotation.y = 0.0
        tf_2.transform.rotation.z = 0.0
        tf_2.transform.rotation.w = 1.0
        tf_.transforms.append(tf_2) 
        self.publisher_.publish(tf_)
        
        #Criar uma tf
        tf_2 = TransformStamped()
        tf_2 = msg;
        tf_2.header.frame_id = "tugbot/camera_back"
        tf_2.child_frame_id = "tugbot/camera_back/color"
        
        tf_2.transform.translation.x = 0.0
        tf_2.transform.translation.y = 0.0
        tf_2.transform.translation.z = 0.0
        
        tf_2.transform.rotation.x = 0.0
        tf_2.transform.rotation.y = 0.0
        tf_2.transform.rotation.z = 0.0
        tf_2.transform.rotation.w = 1.0
        tf_.transforms.append(tf_2) 
        self.publisher_.publish(tf_)
        
        #Criar uma tf
        tf_2 = TransformStamped()
        tf_2 = msg;
        tf_2.header.frame_id = "tugbot/camera_back"
        tf_2.child_frame_id = "tugbot/camera_back/depth"
        
        tf_2.transform.translation.x = 0.0
        tf_2.transform.translation.y = 0.0
        tf_2.transform.translation.z = 0.0
        
        tf_2.transform.rotation.x = 0.0
        tf_2.transform.rotation.y = 0.0
        tf_2.transform.rotation.z = 0.0
        tf_2.transform.rotation.w = 1.0
        tf_.transforms.append(tf_2) 
        self.publisher_.publish(tf_)
        
        
          #Criar uma tf
        tf_2 = TransformStamped()
        tf_2 = msg;
        tf_2.header.frame_id = "tugbot/camera_front"
        tf_2.child_frame_id = "tugbot/camera_front/color"
        
        tf_2.transform.translation.x = 0.0
        tf_2.transform.translation.y = 0.0
        tf_2.transform.translation.z = 0.0
        
        tf_2.transform.rotation.x = 0.0
        tf_2.transform.rotation.y = 0.0
        tf_2.transform.rotation.z = 0.0
        tf_2.transform.rotation.w = 1.0
        tf_.transforms.append(tf_2) 
        self.publisher_.publish(tf_)
        
        #Criar uma tf
        tf_2 = TransformStamped()
        tf_2 = msg;
        tf_2.header.frame_id = "tugbot/camera_front"
        tf_2.child_frame_id = "tugbot/camera_front/depth"
        
        tf_2.transform.translation.x = 0.0
        tf_2.transform.translation.y = 0.0
        tf_2.transform.translation.z = 0.0
        
        tf_2.transform.rotation.x = 0.0
        tf_2.transform.rotation.y = 0.0
        tf_2.transform.rotation.z = 0.0
        tf_2.transform.rotation.w = 1.0
        tf_.transforms.append(tf_2) 
        self.publisher_.publish(tf_)
        
         #Criar uma tf
        tf_2 = TransformStamped()
        tf_2 = msg;
        tf_2.header.frame_id = "tugbot/scan_front"
        tf_2.child_frame_id = "tugbot/scan_front/scan_front"
        
        tf_2.transform.translation.x = 0.0
        tf_2.transform.translation.y = 0.0
        tf_2.transform.translation.z = 0.0
        
        tf_2.transform.rotation.x = 0.0
        tf_2.transform.rotation.y = 0.0
        tf_2.transform.rotation.z = 0.0
        tf_2.transform.rotation.w = 1.0
        tf_.transforms.append(tf_2) 
        self.publisher_.publish(tf_)
        
        
        #Criar uma tf
        tf_2 = TransformStamped()
        tf_2 = msg;
        tf_2.header.frame_id = "tugbot/scan_front"
        tf_2.child_frame_id = "tugbot/scan_back/scan_back"
        
        tf_2.transform.translation.x = 0.0
        tf_2.transform.translation.y = 0.0
        tf_2.transform.translation.z = 0.0
        
        tf_2.transform.rotation.x = 0.0
        tf_2.transform.rotation.y = 0.0
        tf_2.transform.rotation.z = 0.0
        tf_2.transform.rotation.w = 1.0
        tf_.transforms.append(tf_2) 
        self.publisher_.publish(tf_)

        #Criar uma tf
        tf_2 = TransformStamped()
        tf_2 = msg;
        tf_2.header.frame_id = "tugbot/base_link"
        tf_2.child_frame_id = "tugbot/imu_link/imu"
        
        tf_2.transform.translation.x = 0.0
        tf_2.transform.translation.y = 0.0
        tf_2.transform.translation.z = 0.0
        
        tf_2.transform.rotation.x = 0.0
        tf_2.transform.rotation.y = 0.0
        tf_2.transform.rotation.z = 0.0
        tf_2.transform.rotation.w = 1.0
        tf_.transforms.append(tf_2) 
        self.publisher_.publish(tf_)
        
        #Criar uma tf
        tf_2 = TransformStamped()
        tf_2 = msg;
        tf_2.header.frame_id = "tugbot/gripper"
        tf_2.child_frame_id = "tugbot/gripper/sensor_contact"
        
        tf_2.transform.translation.x = 0.0
        tf_2.transform.translation.y = 0.0
        tf_2.transform.translation.z = 0.0
        
        tf_2.transform.rotation.x = 0.0
        tf_2.transform.rotation.y = 0.0
        tf_2.transform.rotation.z = 0.0
        tf_2.transform.rotation.w = 1.0
        tf_.transforms.append(tf_2) 
        self.publisher_.publish(tf_)
        
        
        



def main(args=None):
    rclpy.init(args=args)

    pose_to_tf = Pose_to_tf()

    rclpy.spin(pose_to_tf)

    minimal_subscriber.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
